//main.c
#include "stdint.h"
#include "stdio.h"
#include "string.h"
#include "uart.h"
#include "adc.h"

uint32_t sensor_value;
char buffer[50];  // Buffer for UART transmission

int main()
{
    // Initialize UART and ADC
    UART_TX_init();
    pa1_adc_Init();

    while(1)
    {
        start_conversation();
        sensor_value = adc_read();

        // Convert ADC value to string and send via UART
        sprintf(buffer, "ADC Value: %d\r\n", (int)sensor_value);
        for (int i = 0; buffer[i] != '\0'; i++) {
            USART2_Write(buffer[i]);
        }

        // Simple delay
        for(volatile int i = 0; i < 100000; i++);
    }
}



//adc.h
#ifndef INC_ADC_H_
#define INC_ADC_H_

#include "stdint.h"

// Function declarations for basic 2-channel ADC (no sequence register)
void pa1_adc_Init(void);
void start_conversation(void);
uint32_t adc_read(void);


#endif /* INC_ADC_H_ */




//adc.c
#include "stdint.h"

#define RCC_BASE_ADD              0x40021000UL
#define RCC_APBENR2_OFFSET        0x40UL
#define RCC_APBENR2               (*(volatile unsigned int*)(RCC_BASE_ADD+RCC_APBENR2_OFFSET))

#define RCC_IOPENER_OFFSET        (0x34UL)
#define RCC_IOPENR                (*(volatile unsigned int*)(RCC_BASE_ADD + RCC_IOPENER_OFFSET))

#define GPIOA_BASE                (0x50000000UL)
#define GPIOA_MODER_OFFSET        (0x00UL)
#define GPIOA_MODER               (*(volatile unsigned int*)(GPIOA_BASE + GPIOA_MODER_OFFSET))

#define ADC_BASE_ADD              (0x40012400UL)
#define ADC_CFGR1_OFFSET          (0x0CUL)
#define ADC_CFGR1                 (*(volatile unsigned int*)(ADC_BASE_ADD + ADC_CFGR1_OFFSET))

#define ADC_CHSELR_OFFSET         (0x28UL)
#define ADC_CHSELR                (*(volatile unsigned int*)(ADC_BASE_ADD+ADC_CHSELR_OFFSET))

#define ADC_ISR_OFFSET            (0x00UL)
#define ADC_ISR                   (*(volatile unsigned int*)(ADC_BASE_ADD + ADC_ISR_OFFSET))

#define ADC_DR_OFFSET             (0x40UL)
#define ADC_DR                    (*(volatile unsigned int*)(ADC_BASE_ADD + ADC_DR_OFFSET))

#define ADC_CR_OFFSET             (0x08UL)
#define ADC_CR                    (*(volatile unsigned int*)(ADC_BASE_ADD + ADC_CR_OFFSET))

void pa1_adc_Init(void)
{
    // 1. Enable GPIOA clock
    RCC_IOPENR |= (1U << 0);

    // 2. Configure PA1 as analog mode
    GPIOA_MODER &= ~(0x3 << 2);  // Clear bits
    GPIOA_MODER |= (0x3 << 2);   // Set analog mode (11)

    // 3. Enable ADC clock
    RCC_APBENR2 |= (1U << 20);

    // 4. Configure ADC
    ADC_CFGR1 = 0;  // Reset configuration

    // 5. Select channel 1 (PA1)
    ADC_CHSELR = (1U << 1);

    // 6. Enable ADC
    ADC_CR |= (1U << 0);

    // Wait for ADC to be ready
    while (!(ADC_ISR & (1U << 0)));
}

void start_conversation(void)
{
    // Start conversion
    ADC_CR |= (1U << 2);
}

uint32_t adc_read(void)
{
    // Wait for conversion to complete
    while(!(ADC_ISR & (1U << 2)));

    // Clear EOC flag
    ADC_ISR = (1U << 2);

    return ADC_DR;
}
